#!/bin/bash

# CSR 批次處理工具 - 管理員專用
# 用途：批次處理多個 CSR 文件，支援 S3 整合
# 版本：1.0

# 全域變數
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PARENT_DIR="$(dirname "$SCRIPT_DIR")"

# 載入環境管理器 (必須第一個載入)
source "$PARENT_DIR/lib/env_manager.sh"

# 初始化環境
if ! env_init_for_script "process_csr_batch.sh"; then
    echo -e "${RED}錯誤: 無法初始化環境管理器${NC}"
    exit 1
fi

# 驗證 AWS Profile 整合
echo -e "${BLUE}正在驗證 AWS Profile 設定...${NC}"
if ! env_validate_profile_integration "$CURRENT_ENVIRONMENT" "true"; then
    echo -e "${YELLOW}警告: AWS Profile 設定可能有問題，但繼續執行批次處理工具${NC}"
fi

# 設定環境特定路徑
env_setup_paths

# 載入核心函式庫
source "$PARENT_DIR/lib/core_functions.sh"

# 執行兼容性檢查
check_macos_compatibility

# 顏色定義
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# 預設配置 (環境感知)
get_default_bucket_name() {
    case "$CURRENT_ENVIRONMENT" in
        staging)
            echo "staging-vpn-csr-exchange"
            ;;
        production)
            echo "production-vpn-csr-exchange"
            ;;
        *)
            echo "vpn-csr-exchange"
            ;;
    esac
}

DEFAULT_BUCKET_NAME="$(get_default_bucket_name)"
DEFAULT_DAYS_VALID=365

# 使用說明
show_usage() {
    echo "用法: $0 [選項] [操作]"
    echo ""
    echo "操作:"
    echo "  download        從 S3 下載待處理的 CSR"
    echo "  process         批次簽署本地 CSR 文件"
    echo "  upload          上傳簽署的證書到 S3"
    echo "  monitor         監控 S3 中的新 CSR 並自動處理"
    echo "  status          顯示處理狀態"
    echo ""
    echo "選項:"
    echo "  -b, --bucket-name NAME     S3 存儲桶名稱 (預設: $DEFAULT_BUCKET_NAME)"
    echo "  -e, --environment ENV      目標環境 (staging/production)"
    echo "  -d, --days DAYS           證書有效天數 (預設: $DEFAULT_DAYS_VALID)"
    echo "  -i, --input-dir DIR       CSR 輸入目錄 (預設: ./csr-inbox)"
    echo "  -o, --output-dir DIR      證書輸出目錄 (預設: ./cert-outbox)"
    echo "  -p, --profile PROFILE     AWS CLI profile"
    echo "  --auto-upload             自動上傳簽署的證書到 S3"
    echo "  --notify                  處理完成後發送通知"
    echo "  -v, --verbose             顯示詳細輸出"
    echo "  -h, --help               顯示此幫助訊息"
    echo ""
    echo "範例:"
    echo "  $0 download                           # 下載待處理 CSR"
    echo "  $0 process -e production              # 批次處理 production CSR"
    echo "  $0 upload --auto-upload               # 上傳並自動通知"
    echo "  $0 monitor -e staging                 # 監控 staging 環境"
    echo ""
    echo "工作流程:"
    echo "  1. download: 從 S3 下載新的 CSR 到本地"
    echo "  2. process:  批次簽署所有 CSR"
    echo "  3. upload:   上傳簽署的證書回 S3"
    echo "  4. notify:   通知用戶證書已準備"
}

# 記錄函數
log_message() {
    local message="$1"
    echo "$(date '+%Y-%m-%d %H:%M:%S'): $message" >> "$LOG_FILE"
    if [ "$VERBOSE" = true ]; then
        echo -e "${BLUE}[LOG]${NC} $message"
    fi
}

# 檢查依賴工具
check_dependencies() {
    local missing_tools=()
    
    # 檢查必需工具
    for tool in aws openssl jq; do
        if ! command -v "$tool" &> /dev/null; then
            missing_tools+=("$tool")
        fi
    done
    
    if [ ${#missing_tools[@]} -gt 0 ]; then
        echo -e "${RED}缺少必需工具: ${missing_tools[*]}${NC}"
        return 1
    fi
    
    # 檢查 sign_csr.sh
    if [ ! -x "$SCRIPT_DIR/sign_csr.sh" ]; then
        echo -e "${RED}找不到 sign_csr.sh 或無執行權限${NC}"
        return 1
    fi
    
    echo -e "${GREEN}✓ 所有依賴工具已就緒${NC}"
    return 0
}

# 設置工作目錄
setup_directories() {
    echo -e "${BLUE}設置工作目錄...${NC}"
    
    mkdir -p "$INPUT_DIR" "$OUTPUT_DIR" "$WORK_DIR"
    
    # 創建處理記錄目錄
    mkdir -p "$WORK_DIR/processed" "$WORK_DIR/failed" "$WORK_DIR/logs"
    
    echo -e "${GREEN}✓ 工作目錄已準備${NC}"
    echo -e "  📥 CSR 輸入: $INPUT_DIR"
    echo -e "  📤 證書輸出: $OUTPUT_DIR"
    echo -e "  🛠️  工作目錄: $WORK_DIR"
    
    return 0
}

# 從 S3 下載 CSR
download_csrs_from_s3() {
    echo -e "${BLUE}從 S3 下載 CSR 文件...${NC}"
    
    # 檢查 S3 連接
    if ! aws s3 ls "s3://$BUCKET_NAME/csr/" --profile "$AWS_PROFILE" &>/dev/null; then
        echo -e "${RED}無法訪問 S3 存儲桶: $BUCKET_NAME${NC}"
        return 1
    fi
    
    # 列出待處理的 CSR
    local csr_files
    csr_files=$(aws s3 ls "s3://$BUCKET_NAME/csr/" --profile "$AWS_PROFILE" | awk '{print $4}' | grep '\.csr$')
    
    if [ -z "$csr_files" ]; then
        echo -e "${YELLOW}沒有待處理的 CSR 文件${NC}"
        return 0
    fi
    
    local download_count=0
    echo -e "${CYAN}發現 CSR 文件：${NC}"
    
    while IFS= read -r csr_file; do
        if [ -n "$csr_file" ]; then
            echo -e "  📄 $csr_file"
            
            # 下載 CSR
            if aws s3 cp "s3://$BUCKET_NAME/csr/$csr_file" "$INPUT_DIR/$csr_file" --profile "$AWS_PROFILE"; then
                log_message "下載 CSR: $csr_file"
                ((download_count++))
            else
                echo -e "${RED}下載失敗: $csr_file${NC}"
            fi
        fi
    done <<< "$csr_files"
    
    echo -e "${GREEN}✓ 已下載 $download_count 個 CSR 文件${NC}"
    return 0
}

# 批次處理 CSR
process_csrs() {
    echo -e "${BLUE}批次處理 CSR 文件...${NC}"
    
    # 查找所有 CSR 文件
    local csr_files
    csr_files=$(find "$INPUT_DIR" -name "*.csr" -type f)
    
    if [ -z "$csr_files" ]; then
        echo -e "${YELLOW}沒有找到 CSR 文件${NC}"
        return 0
    fi
    
    local processed_count=0
    local failed_count=0
    
    echo -e "${CYAN}開始處理 CSR 文件：${NC}"
    
    while IFS= read -r csr_file; do
        if [ -n "$csr_file" ]; then
            local basename
            basename=$(basename "$csr_file")
            local username="${basename%.csr}"
            
            echo -e "${BLUE}處理: $basename${NC}"
            
            # 檢查是否已處理過
            if [ -f "$WORK_DIR/processed/$basename" ]; then
                echo -e "${YELLOW}  ⏭️  已處理，跳過${NC}"
                continue
            fi
            
            # 調用 sign_csr.sh
            if "$SCRIPT_DIR/sign_csr.sh" \
                -e "$ENVIRONMENT" \
                "$csr_file" \
                "$DAYS_VALID" \
                "$OUTPUT_DIR"; then
                
                echo -e "${GREEN}  ✓ 簽署成功${NC}"
                
                # 記錄處理成功
                echo "$(date '+%Y-%m-%d %H:%M:%S'): $basename" >> "$WORK_DIR/processed/$basename"
                log_message "簽署成功: $basename"
                ((processed_count++))
                
                # 移動已處理的 CSR
                mv "$csr_file" "$WORK_DIR/processed/"
                
            else
                echo -e "${RED}  ✗ 簽署失敗${NC}"
                
                # 記錄處理失敗
                echo "$(date '+%Y-%m-%d %H:%M:%S'): $basename - 簽署失敗" >> "$WORK_DIR/failed/$basename.log"
                log_message "簽署失敗: $basename"
                ((failed_count++))
                
                # 移動失敗的 CSR
                mv "$csr_file" "$WORK_DIR/failed/"
            fi
        fi
    done <<< "$csr_files"
    
    echo -e "${GREEN}✓ 處理完成 - 成功: $processed_count, 失敗: $failed_count${NC}"
    
    # 生成處理報告
    generate_processing_report "$processed_count" "$failed_count"
    
    return 0
}

# 上傳證書到 S3
upload_certificates_to_s3() {
    echo -e "${BLUE}上傳證書到 S3...${NC}"
    
    # 查找所有證書文件
    local cert_files
    cert_files=$(find "$OUTPUT_DIR" -name "*.crt" -type f)
    
    if [ -z "$cert_files" ]; then
        echo -e "${YELLOW}沒有找到證書文件${NC}"
        return 0
    fi
    
    local upload_count=0
    
    echo -e "${CYAN}上傳證書文件：${NC}"
    
    while IFS= read -r cert_file; do
        if [ -n "$cert_file" ]; then
            local basename
            basename=$(basename "$cert_file")
            
            echo -e "  📤 $basename"
            
            # 上傳證書
            if aws s3 cp "$cert_file" "s3://$BUCKET_NAME/cert/$basename" --profile "$AWS_PROFILE"; then
                log_message "上傳證書: $basename"
                ((upload_count++))
                
                # 移動已上傳的證書
                mkdir -p "$WORK_DIR/uploaded"
                mv "$cert_file" "$WORK_DIR/uploaded/"
            else
                echo -e "${RED}上傳失敗: $basename${NC}"
            fi
        fi
    done <<< "$cert_files"
    
    echo -e "${GREEN}✓ 已上傳 $upload_count 個證書文件${NC}"
    return 0
}

# 監控模式
monitor_mode() {
    echo -e "${BLUE}啟動監控模式...${NC}"
    echo -e "${YELLOW}監控 S3 存儲桶: $BUCKET_NAME${NC}"
    echo -e "${YELLOW}檢查間隔: 30 秒${NC}"
    echo -e "${YELLOW}按 Ctrl+C 停止監控${NC}"
    echo -e ""
    
    while true; do
        echo -e "${CYAN}[$(date '+%H:%M:%S')] 檢查新的 CSR...${NC}"
        
        # 下載新 CSR
        download_csrs_from_s3
        
        # 處理 CSR
        process_csrs
        
        # 自動上傳（如果啟用）
        if [ "$AUTO_UPLOAD" = true ]; then
            upload_certificates_to_s3
        fi
        
        echo -e "${BLUE}等待 30 秒...${NC}"
        sleep 30
    done
}

# 顯示處理狀態
show_status() {
    echo -e "${CYAN}========================================${NC}"
    echo -e "${CYAN}CSR 批次處理狀態${NC}"
    echo -e "${CYAN}========================================${NC}"
    echo -e ""
    
    # 統計本地文件
    local pending_csrs
    pending_csrs=$(find "$INPUT_DIR" -name "*.csr" -type f | wc -l)
    
    local ready_certs
    ready_certs=$(find "$OUTPUT_DIR" -name "*.crt" -type f | wc -l)
    
    local processed_csrs
    processed_csrs=$(find "$WORK_DIR/processed" -name "*.csr" -type f 2>/dev/null | wc -l)
    
    local failed_csrs
    failed_csrs=$(find "$WORK_DIR/failed" -name "*.csr" -type f 2>/dev/null | wc -l)
    
    echo -e "${BLUE}本地狀態：${NC}"
    echo -e "  📥 待處理 CSR: $pending_csrs"
    echo -e "  📤 待上傳證書: $ready_certs"
    echo -e "  ✅ 已處理 CSR: $processed_csrs"
    echo -e "  ❌ 處理失敗: $failed_csrs"
    echo -e ""
    
    # 檢查 S3 狀態
    if aws s3 ls "s3://$BUCKET_NAME/csr/" --profile "$AWS_PROFILE" &>/dev/null; then
        local s3_csrs
        s3_csrs=$(aws s3 ls "s3://$BUCKET_NAME/csr/" --profile "$AWS_PROFILE" | grep -c '\.csr$' || echo "0")
        
        local s3_certs
        s3_certs=$(aws s3 ls "s3://$BUCKET_NAME/cert/" --profile "$AWS_PROFILE" | grep -c '\.crt$' || echo "0")
        
        echo -e "${BLUE}S3 狀態：${NC}"
        echo -e "  📄 S3 中的 CSR: $s3_csrs"
        echo -e "  📄 S3 中的證書: $s3_certs"
    else
        echo -e "${YELLOW}無法訪問 S3 存儲桶${NC}"
    fi
    
    echo -e ""
    
    # 顯示最近的處理日誌
    if [ -f "$LOG_FILE" ]; then
        echo -e "${BLUE}最近的處理記錄：${NC}"
        tail -5 "$LOG_FILE" | while IFS= read -r line; do
            echo -e "  $line"
        done
    fi
}

# 生成處理報告
generate_processing_report() {
    local processed_count="$1"
    local failed_count="$2"
    local report_file="$WORK_DIR/logs/report-$(date +%Y%m%d-%H%M%S).txt"
    
    cat > "$report_file" << EOF
CSR 批次處理報告
================
處理時間: $(date)
環境: $ENVIRONMENT
存儲桶: $BUCKET_NAME

處理統計:
- 成功處理: $processed_count
- 處理失敗: $failed_count
- 總計: $((processed_count + failed_count))

成功處理的文件:
EOF
    
    # 添加成功處理的文件列表
    if [ -d "$WORK_DIR/processed" ]; then
        find "$WORK_DIR/processed" -name "*.csr" -type f -printf "- %f\n" >> "$report_file"
    fi
    
    echo -e "\n失敗處理的文件:" >> "$report_file"
    if [ -d "$WORK_DIR/failed" ]; then
        find "$WORK_DIR/failed" -name "*.csr" -type f -printf "- %f\n" >> "$report_file"
    fi
    
    echo -e "${GREEN}✓ 處理報告已生成: $report_file${NC}"
}

# 清理函數
cleanup() {
    echo -e "${BLUE}正在清理...${NC}"
    # 可以添加清理邏輯
    exit 0
}

# 主函數
main() {
    # 預設值
    BUCKET_NAME="$DEFAULT_BUCKET_NAME"
    ENVIRONMENT=""
    DAYS_VALID="$DEFAULT_DAYS_VALID"
    INPUT_DIR="./csr-inbox"
    OUTPUT_DIR="./cert-outbox"
    WORK_DIR="./csr-work"
    # Get AWS profile from environment manager
    AWS_PROFILE="$(env_get_profile "$CURRENT_ENVIRONMENT" 2>/dev/null || echo default)"
    AUTO_UPLOAD=false
    NOTIFY=false
    VERBOSE=false
    OPERATION=""
    
    # 解析命令行參數
    while [[ $# -gt 0 ]]; do
        case $1 in
            -b|--bucket-name)
                BUCKET_NAME="$2"
                shift 2
                ;;
            -e|--environment)
                ENVIRONMENT="$2"
                shift 2
                ;;
            -d|--days)
                DAYS_VALID="$2"
                shift 2
                ;;
            -i|--input-dir)
                INPUT_DIR="$2"
                shift 2
                ;;
            -o|--output-dir)
                OUTPUT_DIR="$2"
                shift 2
                ;;
            -p|--profile)
                AWS_PROFILE="$2"
                shift 2
                ;;
            --auto-upload)
                AUTO_UPLOAD=true
                shift
                ;;
            --notify)
                NOTIFY=true
                shift
                ;;
            -v|--verbose)
                VERBOSE=true
                shift
                ;;
            -h|--help)
                show_usage
                exit 0
                ;;
            download|process|upload|monitor|status)
                OPERATION="$1"
                shift
                ;;
            *)
                echo -e "${RED}未知參數: $1${NC}"
                show_usage
                exit 1
                ;;
        esac
    done
    
    # 檢查必需參數
    if [ -z "$OPERATION" ]; then
        echo -e "${RED}錯誤: 必須指定操作${NC}"
        show_usage
        exit 1
    fi
    
    if [ -z "$ENVIRONMENT" ] && [[ "$OPERATION" != "status" ]]; then
        echo -e "${RED}錯誤: 必須指定環境 (-e staging/production)${NC}"
        exit 1
    fi
    
    # 設置日誌文件
    LOG_FILE="$PARENT_DIR/logs/${ENVIRONMENT:-common}/csr_batch.log"
    mkdir -p "$(dirname "$LOG_FILE")"
    
    # 設置信號處理
    trap cleanup INT TERM
    
    echo -e "${CYAN}========================================${NC}"
    echo -e "${CYAN}CSR 批次處理工具${NC}"
    echo -e "${CYAN}========================================${NC}"
    echo -e "${BLUE}操作: $OPERATION${NC}"
    echo -e "${BLUE}環境: ${ENVIRONMENT:-N/A}${NC}"
    echo -e "${BLUE}存儲桶: $BUCKET_NAME${NC}"
    echo -e ""
    
    # 檢查依賴
    if ! check_dependencies; then
        exit 1
    fi
    
    # 設置工作目錄
    if ! setup_directories; then
        exit 1
    fi
    
    # 執行指定操作
    case "$OPERATION" in
        download)
            download_csrs_from_s3
            ;;
        process)
            process_csrs
            ;;
        upload)
            upload_certificates_to_s3
            ;;
        monitor)
            monitor_mode
            ;;
        status)
            show_status
            ;;
        *)
            echo -e "${RED}未知操作: $OPERATION${NC}"
            exit 1
            ;;
    esac
    
    log_message "批次處理操作完成: $OPERATION"
}

# 只有在腳本直接執行時才執行主程序
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi